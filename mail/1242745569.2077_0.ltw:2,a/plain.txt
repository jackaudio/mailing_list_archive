Date:        Tue, 19 May 2009 18:04:49 +0300
From:        Nedko Arnaudov  <[hidden] at arnaudov dot name>
To:          Stéphane Letz <[hidden] at grame dot fr>
Cc:          Jack devel <[hidden] at lists dot jackaudio dot org>, Linux Audio Developers <[hidden] at lists dot linuxaudio dot org>
In-Reply-To: Stéphane Letz [LAD] A picture...of the global mess (1242743262.32706_0.ltw:2,a)

Subject:     Re: [LAD] [Jack-Devel] A picture...of the global mess

Stéphane Letz <[hidden]> writes:

> He all,
>
> A picture to try  summary what I understand about we would like :
>
> - a new shared library called "libjackontrol.so" : is does implement
> the so called control API and a IPC mechanism to use it.
>
> -  "jackcontrol" is an *always" running deamon that defined an entry
> IPC point.  jackcontrol get requests from control applications.
> "jackcontrol" can start a seprated server called "jackserver (using a
> fork+exec) way. "jackcontrol" is a *unique* place where setting are
> handled.
>
> - "jackd" is a recoded  control application that parse it's command
> line, and use the control IPC to speak to "jackcontrol" (then just
> quits). jackcontrol then start the "jackserver" whith the appropriate
> paramaters.
>
> - "jackddbus" is a D-Bus aware control application; It receive DBus
> requests and translate them to control IPC to speak to "jackcontrol".
> jackcontrol then start the "jackserver" whith the appropriate
> paramaters
>
> - "libjack.so" speaks also to "jackcontrol" using the control IPC: an
> client that auto-start actually use this mecanism
>
> Does it helps?
>
> Stephane

As alternative diagram we already have the old one:

http://www.marcochapeau.org/documentation/jackenv

Instead of three IPC layers between pyjack(laditools now), you have only
one. I like the architecture described in this diagram.

-- 
Nedko Arnaudov <GnuPG KeyID: DE1716B0>

1242745569.2077_0.ltw:2,a <87eiulyvzi.fsf at usbix dot spacelabs dot org>
________________________________________________________________________________

