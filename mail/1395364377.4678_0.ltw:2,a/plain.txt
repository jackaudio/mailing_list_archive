Date:        Thu, 20 Mar 2014 21:12:42 -0400
From:        Yves Perron  <[hidden] at gmail dot com>
To:          'Paul Davis' <[hidden] at linuxaudiosystems dot com>
Cc:          'JACK' <[hidden] at lists dot jackaudio dot org>
In-Reply-To: Paul Davis Re: [Jack-Devel] Using Jack (1395360661.1526_0.ltw:2,a)
Follow-Up:   Paul Davis Re: [Jack-Devel] Using Jack (1395365032.5316_0.ltw:2,a)

Subject:     Re: [Jack-Devel] Using Jack

 

Hi Paul, I'm getting there, thanks again for your devotion to this thread

As has been mentioned already, the Windows version of JACK uses the same
system that was created for POSIX systems to enable autostart. This system
is what Ardour and Mixbus both use: 

That is interesting, 

write the command to $HOME/.jackdrc and when jack_client_open() is called,
if there is no server, one will be created using the command given in that
file.

While that seem to be a solution, it would be nice if you could elaborate on
this.

What command? 

Is that command called just before jack_client_open()?

Where is $Home? 

Of course, the format of the file is different for jack2 than for jack1, but
since jack1 doesn't run on windows, no problem: one component of the command
per line. 

One component of the command per line? Any example of this I could chew on?

QJackctl also creates this file to store the last configuration in. 

What is the file name? and where is it stored?

You could get the command correct using QJackctl and then just re-use the
file contents in the future.

What you are trying to do is unconventional, and not intended to be easy,
nor is it documented or planned for use by random developers. 

jack_client_open() is already starting a server automatically if none
present, what is unconventional about setting custom options before it
starts? Otherwise it makes it useless to start a vanilla server. in my case
at least.

There are ways to make it work, but as I've tried to make it clear, you are
really on your own trying to accomplish this. The facilities for starting
the JACK server from within a client are a mostly hidden element of the API
and intended for people writing control applications NOT for people who wish
to focus on a normal client.

So what is the point of starting the server automatically in the first
place? That's pretty much the source of my confusion.

Could you define Control application? I mentioned previously: "As a second
phase, I'll use my app to sync, send/receive data from/to other clones of my
app through a local network. "

Would that classify as control application? If yes, that's clearly what I
want. I want to make a controller application.

This is why we are focusing on this. You are not only using JACK on the
least-used-with-JACK platform, but wanting to do something quite
unconventional, when in fact all of your goals could be achieved without
dealing with JACK at all.

 

Why would a jack_server_start("with midi support") function be so
unconventional? Plus, using jack_options_t with all the supported init
options would be beautiful. I don't understand what you are trying to
prevent developers to play with.

 

1395364377.4678_0.ltw:2,a <007f01cf44a2$aa338e90$fe9aabb0$ at gmail dot com>
________________________________________________________________________________

