Date:        Sat, 11 Apr 2015 19:25:39 +0200
From:        Johannes Lorenz  <[hidden] at mailueberfall dot de>
To:          [hidden] at lists dot jackaudio dot org
Follow-Up:   Paul Davis Re: [Jack-Devel] Avoiding spinlocks in a parallel sequencer (1428778014.31178_0.ltw:2,)
Follow-Up:   [hidden] at trellis dot ch Re: [Jack-Devel] Avoiding spinlocks in a parallel sequencer (1428793913.12587_0.ltw:2,)

Subject:     Re: [Jack-Devel] Avoiding spinlocks in a parallel sequencer

> > Nonetheless, if I have 40 instances of zyn, I'd
> > like to (actually must) compute them concurrently. So how to do this with
> > one client?
> 
> By using your own internal graph mechanism that has parallel capabilities.
> See, for excample, https://github.com/flowprogramming/dspatch

This one is based on pthread_cond_wait(), which is either implemented as a spinlock or not realtime safe (I guess the second). So how can this help?

> > The best way I can see is using an array of jack clients, and hoping
> > they'll process() at the same time. However, this sounds very tricky...
>
> There can be very good reasons for using JACK 1. If a user is doing that,
> you won't get any parallelization at all.

Does JACK 2 allow to use multiple jack clients that call process() at the same time? Or does it allow to enter process() with multiple threads? There seems to be no documentation/tutorial about JACK 2.

1428773147.28527_0.ltw:2, <trinity-016ac694-949e-4368-a9e5-443f317959ab-1428773139374 at 3capp-gmx-bs14>
________________________________________________________________________________

