Date:        Mon, 30 Nov 2015 14:27:48 +0100
From:        Robin Gareus  <[hidden] at gareus dot org>
To:          Xavier Mendez <[hidden] at jmendeth dot com>
Cc:          JACK <[hidden] at lists dot jackaudio dot org>
In-Reply-To: Xavier Mendez [Jack-Devel] Non-blocking I/O in process callback (1448881894.16248_0.ltw:2,)
Follow-Up:   Xavier Mendez Re: [Jack-Devel] Non-blocking I/O in process callback (1448892031.4036_0.ltw:2,)

Subject:     Re: [Jack-Devel] Non-blocking I/O in process callback

On 11/30/2015 12:11 PM, Xavier Mendez wrote:
> Hello,
> 
> I'm wondering whether it's safe to do non-blocking reads or writes from
> inside the process callback.
> 
> From what I've seen, non-blocking I/O doesn't cause the process to go
> into blocked state, and the realtime scheduler should not switch to
> another process. But the documentation doesn't seem to allow them:
> 
>> [...] it cannot call functions that might block for a long time. This
>> includes all I/O functions (disk, TTY, network), [...]
> 
> So, is it safe to use non-blocking I/O in the process callback?
> 

On which platform?

The short answer is:

  "If you donâ€™t know how long it will take, don't do it." [1]

All i/o involve syscalls, and then it depends what the kernel does for
the specific system call(s). Asynchronous I/O usually involves signals
at some point which makes it not safe to use. Some implementation also
involve mutexes to avoid resource conflicts. You'll have to check the
standard-lib and kernel source for the system that you target.

All moot anyway. Proper software needs to do error-handling and doing
that in a rt-callback is out of the question. So you need a non-realtime
thread anyway and if you have that you can directly do i/o there.

anyway, using a ringbuffer to decouple i/o is trivial: e.g.
https://github.com/jackaudio/example-clients/blob/master/capture_client.c


best,
robin


[1]
http://www.rossbencina.com/code/real-time-audio-programming-101-time-waits-for-nothing

1448890078.32712_0.ltw:2, <565C4ED4.3000004 at gareus dot org>
________________________________________________________________________________

