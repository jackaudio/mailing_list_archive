Date:        Sun, 03 Jul 2016 00:44:15 +0200
From:        Stéphane Letz  <[hidden] at grame dot fr>
To:          Thomas Brand <[hidden] at trellis dot ch>
Cc:          JACK List <[hidden] at lists dot jackaudio dot org>
Follow-Up:   Thomas Brand Re: [Jack-Devel] graph simplification using mathematics? (1467499668.8584_0.ltw:2,a)

Subject:     Re: [Jack-Devel] graph simplification using mathematics?

Yes indeed : a starting point here : Sarah Denoux, Yann Orlarey, Stéphane Letz, Dominique Fober, CALCUL D’UNE EXPRESSION FAUST ÉQUIVALENTE À PARTIR D’UN GRAPHE D’APPLICATIONS

http://jim2016.gmea.net/actes
 
(although in french)

And in function here : http://faust.grame.fr/faustplayground/ when you export the final equivalent patch. 

Stéphane


> Le 3 juil. 2016 à 00:20, Thomas Brand <[hidden]> a écrit :
> 
> On Sat, July 2, 2016 23:14, StÃ©phane Letz wrote:
>> Faust :  http://faust.grame.fr
>> 
> 
> Faust was the first thing that came to mind indeed. The introduction
> paragraphs in the documentation says
> 
> -specification language
> -describe signal processors from a mathematical point of view
> -free from implementation details
> 
> But right after that:
> -FAUST programs are fully compiled, not interpreted.
> 
> I can imagine to bundle FAUST code from different processors
> semi-automatically or handcrafted to one unit relatively easily. However i
> was thinking in a direction where the units live in a host still as single
> units, to be connected in different ways, and the host would dynamically
> derive a single math operation of the current graph. I understand this
> would include recompilation or some kind of JIT compilation in order to
> work. If possible at all, i think Faust would currently be the best fit,
> since it already offers some of the fundamental concepts needed to even
> think about doing something like this. That would allow large graphs with
> almost no context switches (this is pure speculation).
> 
> Greetings
> Tom
> 
>> 
>>> Le 2 juil. 2016 Ã  22:58, Thomas Brand <[hidden]> a Ã©crit :
>>> 
>>> Hi,
>>> i wondered if the following scenario could work. Assuming DSP is
>>> basically maths, and the formula and variables for every plugin would be
>>> known, would it then be possible to magically simplify all formulas of
>>> all plugins to one single formula doing all in one step? Does this sound
>>> weird? Greetings
>>> Tom
> 
> 

1467499471.8342_0.ltw:2, <8BD16E65-FCC6-4752-BE8F-04E6E347DC46 at grame dot fr>
________________________________________________________________________________

